---
title: Rust Ownership
mathjax: false
date: 2023-06-01 00:06:25
cover: https://rust-1253868755.cos.ap-guangzhou.myqcloud.com/rust-ownership.jpeg
categories:
  - Rust
tags:
  - Rust
  - Rust Ownership
---

# heap vs stack

1. 栈上的操作比堆`高效`
   - 栈上内存的分配和回收只需要`移动栈顶指针`即可
   - 栈上分配和回收都必须`精确计算`指针的增减量，因此栈上一般存放`固定尺寸`的值
2. 栈空间的`容量有限`，不适合存放尺寸太大的值

<!-- more -->

![image-20240606004604990](/Users/zhongmingmao/data/typora/image-20240606004604990.png)

1. `栈空间`会与`函数`关联，每一个`函数调用`，都会对应一个`栈帧`
2. 一个函数被调用，就会分配一个新的栈帧，在函数调用结束后，该栈帧就会被自动释放
3. 函数中的`参数`，`局部变量`等资源，都会放在栈帧中
4. 栈帧中的局部变量可以`引用`堆空间中的资源
5. 如果堆空间的某个资源没有被任何一个栈帧中的变量直接引用或间接引用，该资源是泄露的
   - 被泄露的资源会一直伴随着程序运行，直到程序自身的进程被停止，才会被 OS 回收
6. 内存管理的复杂性主要体现在`管理堆内存`，既要`高效`，又要`安全`

# variable + mutability

> 变量`默认`是`不可变`的，减少一些低级错误

> shadowing - 支持类型不一致

```rust
fn main() {
    let x = 5;
    println!("{x}");

    let x = 6; // Shadowing: this is a new variable, not a reassignment
    println!("{x}");
}
```

```rust
fn main() {
    let a = 10u32;  // u32 
    let a = 'a';    // char - different type
    println!("a: {}", a);
}
```

> mut - 声明变量的内容是可以改变的（局限在`同一类型`）

```rust
fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x); // The value of x is: 5

    x = 6;
    println!("The value of x is: {}", x); // The value of x is: 6
}
```

> 如果变量声明为 mut，但实际没有修改，编译器会提示移除 mut 修饰符

1. 如果一个特性很好用，但滥用成本很低，就一定会被滥用
2. `TypeScript any` 与 `Rust mut` 形成强烈对比
3. JavaScript 中的 let 和 var，并没有在语言层面强制约束最佳实践

# variable type

1. 值是有类型的，一旦一个变量`绑定`了一个值，则该变量被指定为这个值的类型
2. 也可以先指定变量的类型，然后将一个值绑定上去
3. 所有变量都应该具有`明确的类型`

# ownership







