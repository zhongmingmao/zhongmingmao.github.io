---
title: Go Concurrency - Mutex
mathjax: false
date: 2023-03-01 00:06:25
cover: https://cnf-1253868755.cos.ap-guangzhou.myqcloud.com/k8s/go-mutex.webp
categories:
  - Go
tags:
  - Go
  - Concurrency
  - Cloud Native
---

# 基本用法

## 临界区

1. 临界区是一个被`共享`的资源
2. 使用`互斥锁`，限定临界区只能同时由`一个线程`持有
   - 当临界区由一个线程持有时，其它线程要进入临界区，会返回`失败`或者`等待`
   - 直到持有的线程`退出`临界区，其它等待线程才有机会`竞争`临界区

![image-20231219193626967](https://go-1253868755.cos.ap-guangzhou.myqcloud.com/concurrency/image-20231219193626967.png)

<!-- more -->

## 同步原语

| 适用场景   | 同步原语            |
| ---------- | ------------------- |
| `共享资源` | Mutex / RWMutex     |
| `任务编排` | WaitGroup / Channel |
| `消息传递` | Channel             |

## 基本用法

### sync.Locker

```go
// A Locker represents an object that can be locked and unlocked.
type Locker interface {
	Lock()
	Unlock()
}
```

### Mutex

```go
func (m *Mutex) Lock()
func (m *Mutex) Unlock()
```

1. 当一个 goroutine 通过调用 Lock 方法获得这个锁的`所有权`后
2. 其它请求锁的 goroutine 会`阻塞`在 Lock 方法的调用上，直到锁被释放并且自身获得了这把锁的所有权

#### 不同步

```go
count := 0

concurrency := 10
loop := 100000
var wg sync.WaitGroup
wg.Add(concurrency)

for i := 0; i < concurrency; i++ {
  go func() {
    defer wg.Done()

    for i := 0; i < loop; i++ {
      count++ // not atomic
    }
  }()
}

wg.Wait()
fmt.Println(count, count < concurrency*loop) // 216971 true
```

```
$ go tool compile -S main.go
...
	0x0058 00088 (main.go:21)	MOVD	(R0), R3
	0x005c 00092 (main.go:21)	ADD	$1, R3, R3
	0x0060 00096 (main.go:21)	MOVD	R3, (R0)
...
```



#### Go Race Detector

> The race detector is integrated with the go tool chain. When the `-race` command-line flag is set, the compiler instruments all memory accesses with code that records when and how the memory was accessed, while the runtime library watches for unsynchronized accesses to shared variables. When such “racy” behavior is detected, a warning is printed. (See [this article](https://github.com/google/sanitizers/wiki/ThreadSanitizerAlgorithm) for the details of the algorithm.)

> Because of its design, the race detector can detect race conditions only when they are actually triggered by running code, which means it’s important to run race-enabled binaries under realistic workloads. However, race-enabled binaries can use ten times the CPU and memory, so it is impractical to enable the race detector all the time. One way out of this dilemma is to run some tests with the race detector enabled. Load tests and integration tests are good candidates, since they tend to exercise concurrent parts of the code. Another approach using production workloads is to deploy a single race-enabled instance within a pool of running servers.

```
$ go run -race main.go
==================
WARNING: DATA RACE
Read at 0x00c0000240f8 by goroutine 8:
  main.main.func1()
      /Users/xxx/workspace/go/src/github.com/xxx/go101/main.go:21 +0x90

Previous write at 0x00c0000240f8 by goroutine 7:
  main.main.func1()
      /Users/xxx/workspace/go/src/github.com/xxx/go101/main.go:21 +0xa0

Goroutine 8 (running) created at:
  main.main()
      /Users/xxx/workspace/go/src/github.com/xxx/go101/main.go:17 +0x74

Goroutine 7 (running) created at:
  main.main()
      /Users/xxx/workspace/go/src/github.com/xxx/go101/main.go:17 +0x74
==================
291308 true
Found 1 data race(s)
exit status 66
```

> 实现机制：在`编译`阶段`插入`指令，在`运行时`通过插入的指令检测`并发读写`从而发现 `data race` 问题

> 将开启了 race 的程序部署到线上，是非常影响`性能`的

```
$ go tool compile -race -S main.go
...
	0x008c 00140 (main.go:21)	MOVD	main.&count-24(SP), R0
	0x0090 00144 (main.go:21)	PCDATA	$1, $2
	0x0090 00144 (main.go:21)	CALL	runtime.raceread(SB)
	0x0094 00148 (main.go:21)	MOVD	main.&count-24(SP), R0
	0x0098 00152 (main.go:21)	MOVD	(R0), R1
	0x009c 00156 (main.go:21)	MOVD	R1, main..autotmp_10-112(SP)
	0x00a0 00160 (main.go:21)	CALL	runtime.racewrite(SB)
	0x00a4 00164 (main.go:21)	MOVD	main..autotmp_10-112(SP), R1
	0x00a8 00168 (main.go:21)	ADD	$1, R1, R1
	0x00ac 00172 (main.go:21)	MOVD	main.&count-24(SP), R0
	0x00b0 00176 (main.go:21)	MOVD	R1, (R0)
...
```

#### 同步

> 临界区为 count++

```go
func main() {
	count := 0

	concurrency := 10
	loop := 100000
	var wg sync.WaitGroup
	wg.Add(concurrency)

	// Mutex 是零值可用，即还没有 goroutine 等待的未加锁的状态
	var mu sync.Mutex
	for i := 0; i < concurrency; i++ {
		go func() {
			defer wg.Done()

			for i := 0; i < loop; i++ {
				mu.Lock()
				count++ // not atomic
				mu.Unlock()
			}
		}()
	}

	wg.Wait()
	fmt.Println(count, count == concurrency*loop) // 1000000 true
}
```

#### 类型嵌入

```go
type Counter struct {
	sync.Mutex // 零值可用
	counter    int
}

func (c *Counter) Incr() {
	defer c.Unlock()

	c.Lock()
	c.counter++
}

func (c *Counter) Count() int {
	defer c.Unlock()

	c.Lock()
	return c.counter
}

func main() {
	var count Counter

	concurrency := 10
	loop := 100000
	var wg sync.WaitGroup
	wg.Add(concurrency)

	for i := 0; i < concurrency; i++ {
		go func() {
			defer wg.Done()

			for i := 0; i < loop; i++ {
				count.Incr()
			}
		}()
	}

	wg.Wait()
	fmt.Println(count.counter, count.Count() == concurrency*loop) // 1000000 true
}
```

# 实现原理

