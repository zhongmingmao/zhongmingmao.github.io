<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ByteCoding</title>
  
  
  <link href="https://blog.zhongmingmao.top/atom.xml" rel="self"/>
  
  <link href="https://blog.zhongmingmao.top/"/>
  <updated>2024-11-18T08:12:39.644Z</updated>
  <id>https://blog.zhongmingmao.top/</id>
  
  <author>
    <name>zhongmingmao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark - SQL</title>
    <link href="https://blog.zhongmingmao.top/2024/09/19/bigdata-spark-sql/"/>
    <id>https://blog.zhongmingmao.top/2024/09/19/bigdata-spark-sql/</id>
    <published>2024-09-18T16:06:25.000Z</published>
    <updated>2024-11-18T08:12:39.644Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;&gt;&lt;/a&gt;历史&lt;/h1&gt;&lt;h2 id=&quot;Hive&quot;&gt;&lt;a href=&quot;#Hive&quot; class=&quot;headerlink&quot; title=&quot;Hive&quot;&gt;&lt;/a&gt;Hive&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一开始，&lt;strong&gt;Hadoop&amp;#x2F;MapReduce&lt;/strong&gt; 在企业生产中大量使用，在 &lt;strong&gt;HDFS&lt;/strong&gt; 上积累了大量数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MapReduce&lt;/strong&gt; 对于开发者而言&lt;strong&gt;使用难度&lt;/strong&gt;较大，大部分开发人员最熟悉的还是&lt;strong&gt;传统的关系型数据库&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;为了方便大多数开发人员使用 Hadoop，诞生了 &lt;strong&gt;Hive&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Hive 提供类似 &lt;strong&gt;SQL&lt;/strong&gt; 的编程接口，&lt;strong&gt;HQL&lt;/strong&gt; 经过&lt;strong&gt;语法解析&lt;/strong&gt;、&lt;strong&gt;逻辑计划&lt;/strong&gt;、&lt;strong&gt;物理计划&lt;/strong&gt;转化成 &lt;strong&gt;MapReduce&lt;/strong&gt; 程序执行&lt;ul&gt;
&lt;li&gt;使得开发人员很容易对 &lt;strong&gt;HDFS&lt;/strong&gt; 上存储的数据进行&lt;strong&gt;查询&lt;/strong&gt;和&lt;strong&gt;分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    <category term="Spark" scheme="https://blog.zhongmingmao.top/categories/big-data/spark/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
    <category term="Spark" scheme="https://blog.zhongmingmao.top/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark - RDD</title>
    <link href="https://blog.zhongmingmao.top/2024/09/18/bigdata-spark-rdd/"/>
    <id>https://blog.zhongmingmao.top/2024/09/18/bigdata-spark-rdd/</id>
    <published>2024-09-17T16:06:25.000Z</published>
    <updated>2024-11-17T17:59:51.209Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式内存&quot;&gt;&lt;a href=&quot;#分布式内存&quot; class=&quot;headerlink&quot; title=&quot;分布式内存&quot;&gt;&lt;/a&gt;分布式内存&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;传统的 &lt;strong&gt;MapReduce&lt;/strong&gt; 框架&lt;strong&gt;运行缓慢&lt;/strong&gt;，主要原因是 &lt;strong&gt;DAG&lt;/strong&gt; 的&lt;strong&gt;中间计算结果&lt;/strong&gt;需要写入&lt;strong&gt;硬盘&lt;/strong&gt;来&lt;strong&gt;防止运行结果丢失&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每次调用中间计算结果都需要进行一次硬盘的读取&lt;ul&gt;
&lt;li&gt;反复对硬盘进行&lt;strong&gt;读写&lt;/strong&gt;操作以及潜在的&lt;strong&gt;数据复制&lt;/strong&gt;和&lt;strong&gt;序列化&lt;/strong&gt;操作会大大地提高了&lt;strong&gt;计算延迟&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新的&lt;strong&gt;分布式存储&lt;/strong&gt;方案 - 保持之前系统的稳定性、错误恢复和可扩展性，并&lt;strong&gt;尽可能地减少硬盘 IO 操作&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;RDD 是基于&lt;strong&gt;分布式内存&lt;/strong&gt;的数据抽象，不仅支持基于&lt;strong&gt;工作集&lt;/strong&gt;的应用，同时具有&lt;strong&gt;数据流模型&lt;/strong&gt;的特点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    <category term="Spark" scheme="https://blog.zhongmingmao.top/categories/big-data/spark/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
    <category term="Spark" scheme="https://blog.zhongmingmao.top/tags/spark/"/>
    
    <category term="RDD" scheme="https://blog.zhongmingmao.top/tags/rdd/"/>
    
  </entry>
  
  <entry>
    <title>Spark - Overview</title>
    <link href="https://blog.zhongmingmao.top/2024/09/17/bigdata-spark-overview/"/>
    <id>https://blog.zhongmingmao.top/2024/09/17/bigdata-spark-overview/</id>
    <published>2024-09-16T16:06:25.000Z</published>
    <updated>2024-11-17T14:17:58.226Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;MapReduce&quot;&gt;&lt;a href=&quot;#MapReduce&quot; class=&quot;headerlink&quot; title=&quot;MapReduce&quot;&gt;&lt;/a&gt;MapReduce&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;MapReduce 通过简单的 &lt;strong&gt;Map&lt;/strong&gt; 和 &lt;strong&gt;Reduce&lt;/strong&gt; 的&lt;strong&gt;抽象&lt;/strong&gt;提供了一个&lt;strong&gt;编程模型&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;可以在一个由上百台机器组成的集群上&lt;strong&gt;并发&lt;/strong&gt;处理大量的数据集，而把计算细节隐藏起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各种各样的&lt;strong&gt;复杂数据处理&lt;/strong&gt;都可以分解为 &lt;strong&gt;Map&lt;/strong&gt; 和 &lt;strong&gt;Reduce&lt;/strong&gt; 的&lt;strong&gt;基本元素&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;复杂的数据处理可以分解成由多个 &lt;strong&gt;Job&lt;/strong&gt;（包含一个 &lt;strong&gt;Mapper&lt;/strong&gt; 和一个 &lt;strong&gt;Reducer&lt;/strong&gt;）组成的 &lt;strong&gt;DAG&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后，将每个 &lt;strong&gt;Mapper&lt;/strong&gt; 和 &lt;strong&gt;Reducer&lt;/strong&gt; 放到 &lt;strong&gt;Hadoop&lt;/strong&gt; 集群上执行，得到最终结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    <category term="Spark" scheme="https://blog.zhongmingmao.top/categories/big-data/spark/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
    <category term="Spark" scheme="https://blog.zhongmingmao.top/tags/spark/"/>
    
    <category term="MapReduce" scheme="https://blog.zhongmingmao.top/tags/mapreduce/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - Kappa</title>
    <link href="https://blog.zhongmingmao.top/2024/09/16/bigdata-kappa/"/>
    <id>https://blog.zhongmingmao.top/2024/09/16/bigdata-kappa/</id>
    <published>2024-09-15T16:06:25.000Z</published>
    <updated>2024-11-17T12:22:16.038Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Lambda&quot;&gt;&lt;a href=&quot;#Lambda&quot; class=&quot;headerlink&quot; title=&quot;Lambda&quot;&gt;&lt;/a&gt;Lambda&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://big-data-1253868755.cos.ap-guangzhou.myqcloud.com/image-20241117181045851.png&quot; alt=&quot;image-20241117181045851&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - Lambda</title>
    <link href="https://blog.zhongmingmao.top/2024/09/15/bigdata-lambda/"/>
    <id>https://blog.zhongmingmao.top/2024/09/15/bigdata-lambda/</id>
    <published>2024-09-14T16:06:25.000Z</published>
    <updated>2024-11-17T09:00:52.048Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Architecture&quot;&gt;&lt;a href=&quot;#Architecture&quot; class=&quot;headerlink&quot; title=&quot;Architecture&quot;&gt;&lt;/a&gt;Architecture&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://big-data-1253868755.cos.ap-guangzhou.myqcloud.com/image-20241117154711119.png&quot; alt=&quot;image-20241117154711119&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - CAP</title>
    <link href="https://blog.zhongmingmao.top/2024/09/14/bigdata-cap/"/>
    <id>https://blog.zhongmingmao.top/2024/09/14/bigdata-cap/</id>
    <published>2024-09-13T16:06:25.000Z</published>
    <updated>2024-11-16T10:32:01.017Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;CAP&quot;&gt;&lt;a href=&quot;#CAP&quot; class=&quot;headerlink&quot; title=&quot;CAP&quot;&gt;&lt;/a&gt;CAP&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在任意的分布式系统中，最多只能同时满足两个：&lt;strong&gt;Consistency&lt;/strong&gt;、&lt;strong&gt;Availability&lt;/strong&gt;、&lt;strong&gt;Partition-tolerance&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://big-data-1253868755.cos.ap-guangzhou.myqcloud.com/bigdata-cap.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - Pub + Sub</title>
    <link href="https://blog.zhongmingmao.top/2024/09/13/bigdata-pub-sub/"/>
    <id>https://blog.zhongmingmao.top/2024/09/13/bigdata-pub-sub/</id>
    <published>2024-09-12T16:06:25.000Z</published>
    <updated>2024-11-15T16:56:03.492Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Concept&quot;&gt;&lt;a href=&quot;#Concept&quot; class=&quot;headerlink&quot; title=&quot;Concept&quot;&gt;&lt;/a&gt;Concept&lt;/h1&gt;&lt;h2 id=&quot;Message&quot;&gt;&lt;a href=&quot;#Message&quot; class=&quot;headerlink&quot; title=&quot;Message&quot;&gt;&lt;/a&gt;Message&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://big-data-1253868755.cos.ap-guangzhou.myqcloud.com/image-20241115232326335.png&quot; alt=&quot;image-20241115232326335&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - Workflow</title>
    <link href="https://blog.zhongmingmao.top/2024/09/12/bigdata-workflow/"/>
    <id>https://blog.zhongmingmao.top/2024/09/12/bigdata-workflow/</id>
    <published>2024-09-11T16:06:25.000Z</published>
    <updated>2024-11-15T10:32:25.322Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Workflow&quot;&gt;&lt;a href=&quot;#Workflow&quot; class=&quot;headerlink&quot; title=&quot;Workflow&quot;&gt;&lt;/a&gt;Workflow&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;将多种不同的处理模块连接在一起，最后得出一个 &lt;strong&gt;DAG&lt;/strong&gt;，称为一个 &lt;strong&gt;Workflow System&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在 Workflow System 中，有对应的&lt;strong&gt;设计模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - Batch + Stream</title>
    <link href="https://blog.zhongmingmao.top/2024/09/11/bigdata-batch-stream/"/>
    <id>https://blog.zhongmingmao.top/2024/09/11/bigdata-batch-stream/</id>
    <published>2024-09-10T16:06:25.000Z</published>
    <updated>2024-11-15T09:42:44.906Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Concept&quot;&gt;&lt;a href=&quot;#Concept&quot; class=&quot;headerlink&quot; title=&quot;Concept&quot;&gt;&lt;/a&gt;Concept&lt;/h1&gt;&lt;h2 id=&quot;Unbounded-vs-Bounded&quot;&gt;&lt;a href=&quot;#Unbounded-vs-Bounded&quot; class=&quot;headerlink&quot; title=&quot;Unbounded vs Bounded&quot;&gt;&lt;/a&gt;Unbounded vs Bounded&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有界数据是无界数据的一个&lt;strong&gt;子集&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;无界数据是一种&lt;strong&gt;不断增长&lt;/strong&gt;，是&lt;strong&gt;无限&lt;/strong&gt;的数据集，无法判定何时停止发送 - Streaming Data&lt;/li&gt;
&lt;li&gt;有界数据是一种有限的数据集&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>Big Data - Distributed System</title>
    <link href="https://blog.zhongmingmao.top/2024/09/10/bigdata-distributed-system/"/>
    <id>https://blog.zhongmingmao.top/2024/09/10/bigdata-distributed-system/</id>
    <published>2024-09-09T16:06:25.000Z</published>
    <updated>2024-11-15T08:00:33.809Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;SLA&quot;&gt;&lt;a href=&quot;#SLA&quot; class=&quot;headerlink&quot; title=&quot;SLA&quot;&gt;&lt;/a&gt;SLA&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Service-Level Agreement - 系统服务提供者对客户的一个&lt;strong&gt;服务承诺&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Availabilty&quot;&gt;&lt;a href=&quot;#Availabilty&quot; class=&quot;headerlink&quot; title=&quot;Availabilty&quot;&gt;&lt;/a&gt;Availabilty&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;可用性指的是系统服务能&lt;strong&gt;正常运行&lt;/strong&gt;所占的&lt;strong&gt;时间百分比&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对许多系统来说，&lt;strong&gt;99.99%&lt;/strong&gt; 可以被认为&lt;strong&gt;高可用性&lt;/strong&gt; - 中断时间≈ &lt;strong&gt;50 分钟&amp;#x2F;年&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/categories/big-data/"/>
    
    
    <category term="Big Data" scheme="https://blog.zhongmingmao.top/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>RAG - Qdrant</title>
    <link href="https://blog.zhongmingmao.top/2024/09/09/rag-vector-qdrant/"/>
    <id>https://blog.zhongmingmao.top/2024/09/09/rag-vector-qdrant/</id>
    <published>2024-09-08T16:06:25.000Z</published>
    <updated>2024-11-08T12:28:09.447Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Features&quot;&gt;&lt;a href=&quot;#Features&quot; class=&quot;headerlink&quot; title=&quot;Features&quot;&gt;&lt;/a&gt;Features&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://rag-1253868755.cos.ap-guangzhou.myqcloud.com/image-20241003141455289.png&quot; alt=&quot;image-20241003141455289&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="https://blog.zhongmingmao.top/categories/ai/"/>
    
    <category term="RAG" scheme="https://blog.zhongmingmao.top/categories/ai/rag/"/>
    
    
    <category term="AI" scheme="https://blog.zhongmingmao.top/tags/ai/"/>
    
    <category term="LLM" scheme="https://blog.zhongmingmao.top/tags/llm/"/>
    
    <category term="RAG" scheme="https://blog.zhongmingmao.top/tags/rag/"/>
    
    <category term="Vector" scheme="https://blog.zhongmingmao.top/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>Python - Debug + Profile</title>
    <link href="https://blog.zhongmingmao.top/2024/09/08/python-debug-profile/"/>
    <id>https://blog.zhongmingmao.top/2024/09/08/python-debug-profile/</id>
    <published>2024-09-07T16:06:25.000Z</published>
    <updated>2024-11-02T03:31:03.746Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;pdb&quot;&gt;&lt;a href=&quot;#pdb&quot; class=&quot;headerlink&quot; title=&quot;pdb&quot;&gt;&lt;/a&gt;pdb&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;pdb 是 Python 自带的调试库，为 Python 程序提供&lt;strong&gt;交互式&lt;/strong&gt;的&lt;strong&gt;源代码调试&lt;/strong&gt;功能，是&lt;strong&gt;命令行版本&lt;/strong&gt;的 IDE 断点调试器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instruction&lt;/th&gt;
&lt;th&gt;Desc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;print&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;next - step over&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;list - show source code context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;step into&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;stop out - 继续执行，直到&lt;strong&gt;当前函数完成&lt;/strong&gt;后返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#96;b [ ([filename:]lineno&lt;/td&gt;
&lt;td&gt;function) [, condition] ]&amp;#96;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;continue - 一直执行程序，直到遇到下一个断点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - With</title>
    <link href="https://blog.zhongmingmao.top/2024/09/07/python-with/"/>
    <id>https://blog.zhongmingmao.top/2024/09/07/python-with/</id>
    <published>2024-09-06T16:06:25.000Z</published>
    <updated>2024-11-01T17:41:50.090Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;资源是&lt;strong&gt;有限&lt;/strong&gt;的，使用过后需要&lt;strong&gt;释放&lt;/strong&gt;，否则会造成&lt;strong&gt;资源泄露&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;File&quot;&gt;&lt;a href=&quot;#File&quot; class=&quot;headerlink&quot; title=&quot;File&quot;&gt;&lt;/a&gt;File&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10_000_000&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f = &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;test.txt&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;w&amp;#x27;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# OSError: [Errno 24] Too many open files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - GC</title>
    <link href="https://blog.zhongmingmao.top/2024/09/06/python-gc/"/>
    <id>https://blog.zhongmingmao.top/2024/09/06/python-gc/</id>
    <published>2024-09-05T16:06:25.000Z</published>
    <updated>2024-11-01T13:56:49.758Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;计数引用&quot;&gt;&lt;a href=&quot;#计数引用&quot; class=&quot;headerlink&quot; title=&quot;计数引用&quot;&gt;&lt;/a&gt;计数引用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Python 中&lt;strong&gt;一切皆对象&lt;/strong&gt;，&lt;strong&gt;变量&lt;/strong&gt;的本质是&lt;strong&gt;对像的指针&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当一个对象的&lt;strong&gt;引用计数&lt;/strong&gt;（指针数）为 &lt;strong&gt;0&lt;/strong&gt; 时，说明该对象&lt;strong&gt;不可达&lt;/strong&gt;，成为&lt;strong&gt;垃圾&lt;/strong&gt;，需要被&lt;strong&gt;回收&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - GIL</title>
    <link href="https://blog.zhongmingmao.top/2024/09/05/python-gil/"/>
    <id>https://blog.zhongmingmao.top/2024/09/05/python-gil/</id>
    <published>2024-09-04T16:06:25.000Z</published>
    <updated>2024-11-01T14:12:19.565Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Cpu-bound&quot;&gt;&lt;a href=&quot;#Cpu-bound&quot; class=&quot;headerlink&quot; title=&quot;Cpu bound&quot;&gt;&lt;/a&gt;Cpu bound&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;单线程 - 2.555494917&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;CountDown&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start = time.perf_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;100_000_000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CountDown(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end = time.perf_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&amp;quot;Time elapsed: &lt;span class=&quot;subst&quot;&gt;&amp;#123;end - start&amp;#125;&lt;/span&gt; seconds&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# Time elapsed: 2.555494917 seconds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - Async IO</title>
    <link href="https://blog.zhongmingmao.top/2024/09/04/python-asyncio/"/>
    <id>https://blog.zhongmingmao.top/2024/09/04/python-asyncio/</id>
    <published>2024-09-03T16:06:25.000Z</published>
    <updated>2024-11-01T14:21:41.156Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;线程局限&quot;&gt;&lt;a href=&quot;#线程局限&quot; class=&quot;headerlink&quot; title=&quot;线程局限&quot;&gt;&lt;/a&gt;线程局限&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;多线程在运行过程中容易被&lt;strong&gt;打断&lt;/strong&gt;，有可能会出现 &lt;strong&gt;race condition&lt;/strong&gt; 的情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程切换&lt;/strong&gt;本身存在&lt;strong&gt;开销&lt;/strong&gt;，不能无限增加&lt;strong&gt;线程数&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - Futures</title>
    <link href="https://blog.zhongmingmao.top/2024/09/03/python-futures/"/>
    <id>https://blog.zhongmingmao.top/2024/09/03/python-futures/</id>
    <published>2024-09-02T16:06:25.000Z</published>
    <updated>2024-11-01T07:00:13.556Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;并行-vs-并发&quot;&gt;&lt;a href=&quot;#并行-vs-并发&quot; class=&quot;headerlink&quot; title=&quot;并行 vs 并发&quot;&gt;&lt;/a&gt;并行 vs 并发&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;并发（&lt;strong&gt;Concurrency&lt;/strong&gt;） - 在某个特定的时刻，只允许有一个操作发生，线程和任务之间会相互切换，&lt;strong&gt;交替运行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;并行（&lt;strong&gt;Parallelism&lt;/strong&gt;） - 在&lt;strong&gt;同一时刻&lt;/strong&gt;，有多个操作&lt;strong&gt;同时进行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Python 中有两种并发形式 - &lt;strong&gt;threading&lt;/strong&gt; + &lt;strong&gt;asyncio&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - Coroutine</title>
    <link href="https://blog.zhongmingmao.top/2024/09/02/python-coroutine/"/>
    <id>https://blog.zhongmingmao.top/2024/09/02/python-coroutine/</id>
    <published>2024-09-01T16:06:25.000Z</published>
    <updated>2024-11-01T03:46:33.596Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;协程是实现&lt;strong&gt;并发编程&lt;/strong&gt;的一种方式&lt;/li&gt;
&lt;li&gt;多&lt;strong&gt;线程&lt;/strong&gt;&amp;#x2F;多&lt;strong&gt;进程&lt;/strong&gt;模型，是解决并发问题的经典模式&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C10K&lt;/strong&gt; - 线程&amp;#x2F;进程上下文切换占用大量资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nginx &lt;strong&gt;Event loop&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;启动一个&lt;strong&gt;统一&lt;/strong&gt;的调度器，让调度器来&lt;strong&gt;决定&lt;/strong&gt;一个时刻去运行哪个任务&lt;/li&gt;
&lt;li&gt;节省了多线程中&lt;strong&gt;启动线程&lt;/strong&gt;、&lt;strong&gt;管理线程&lt;/strong&gt;、&lt;strong&gt;同步锁&lt;/strong&gt;等各种开销&lt;/li&gt;
&lt;li&gt;相比于 Apache，用更低的资源支持更多的并发连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Callback hell&lt;/strong&gt; - JavaScript&lt;ul&gt;
&lt;li&gt;继承了 &lt;strong&gt;Event loop&lt;/strong&gt; 的优越性，同时还提供 &lt;strong&gt;async &amp;#x2F; await&lt;/strong&gt; 语法糖，解决了&lt;strong&gt;执行性&lt;/strong&gt;和&lt;strong&gt;可读性&lt;/strong&gt;共存的难题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协程&lt;/strong&gt;开始崭露头角，尝试使用 &lt;strong&gt;Node.js&lt;/strong&gt; 实现后端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python 3.7 提供基于 &lt;strong&gt;asyncio&lt;/strong&gt; 的 &lt;strong&gt;async &amp;#x2F; await&lt;/strong&gt; 方法&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - Iterator + Generator</title>
    <link href="https://blog.zhongmingmao.top/2024/09/01/python-iterator-generator/"/>
    <id>https://blog.zhongmingmao.top/2024/09/01/python-iterator-generator/</id>
    <published>2024-08-31T16:06:25.000Z</published>
    <updated>2024-10-31T15:05:02.362Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Python 中一切皆对象，对象的抽象就是类，对象的&lt;strong&gt;集合&lt;/strong&gt;为&lt;strong&gt;容器&lt;/strong&gt;（列表、元组、字典、集合）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有的容器&lt;/strong&gt;都是可迭代的（&lt;strong&gt;iterable&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;迭代器（&lt;strong&gt;iterator&lt;/strong&gt;）提供了一个 &lt;strong&gt;next&lt;/strong&gt; 的方法&lt;ul&gt;
&lt;li&gt;得到容器的&lt;strong&gt;下一个对象&lt;/strong&gt;，或者得到一个 &lt;strong&gt;StopIteration&lt;/strong&gt; 的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可迭代对象&lt;/strong&gt;，通过 &lt;strong&gt;iter()&lt;/strong&gt; 函数返回一个迭代器（&lt;strong&gt;iterator&lt;/strong&gt;），再通过 &lt;strong&gt;next()&lt;/strong&gt; 函数实现遍历&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for in&lt;/code&gt; 语句&lt;strong&gt;隐式化&lt;/strong&gt;了该&lt;strong&gt;迭代过程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python - Metaclass</title>
    <link href="https://blog.zhongmingmao.top/2024/08/31/python-metaclass/"/>
    <id>https://blog.zhongmingmao.top/2024/08/31/python-metaclass/</id>
    <published>2024-08-30T16:06:25.000Z</published>
    <updated>2024-10-31T09:03:05.471Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;超越变形&quot;&gt;&lt;a href=&quot;#超越变形&quot; class=&quot;headerlink&quot; title=&quot;超越变形&quot;&gt;&lt;/a&gt;超越变形&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;YAMLObject 的一个&lt;strong&gt;超越变形&lt;/strong&gt;能力，即的&lt;strong&gt;任意子类&lt;/strong&gt;支持&lt;strong&gt;序列化&lt;/strong&gt;和&lt;strong&gt;反序列化&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Monster&lt;/span&gt;(yaml.YAMLObject):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    yaml_tag = &lt;span class=&quot;string&quot;&gt;u&amp;#x27;!Monster&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self, name, hp, ac, attacks&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.hp = hp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.ac = ac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.attacks = attacks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;%s(name=%r, hp=%r, ac=%r, attacks=%r)&amp;quot;&lt;/span&gt; % (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.__class__.__name__, self.name, self.hp, self.ac,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.attacks)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yaml.load(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;--- !Monster&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;name: Cave spider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;hp: [2,6]    # 2d6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;ac: 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;attacks: [BITE, HURT]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Monster(name=&lt;span class=&quot;string&quot;&gt;&amp;#x27;Cave spider&amp;#x27;&lt;/span&gt;, hp=[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], ac=&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, attacks=[&lt;span class=&quot;string&quot;&gt;&amp;#x27;BITE&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;HURT&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; yaml.dump(Monster(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name=&lt;span class=&quot;string&quot;&gt;&amp;#x27;Cave lizard&amp;#x27;&lt;/span&gt;, hp=[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], ac=&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, attacks=[&lt;span class=&quot;string&quot;&gt;&amp;#x27;BITE&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;HURT&amp;#x27;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/categories/python/"/>
    
    
    <category term="Python" scheme="https://blog.zhongmingmao.top/tags/python/"/>
    
  </entry>
  
</feed>
